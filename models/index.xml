<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Model Reference on OSCAL Reference</title><link>pages.nist.gov/OSCAL-Reference/models/</link><description>Recent content in Model Reference on OSCAL Reference</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="pages.nist.gov/OSCAL-Reference/models/index.xml" rel="self" type="application/rss+xml"/><item><title>OSCAL Data Types</title><link>pages.nist.gov/OSCAL-Reference/models/datatypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>pages.nist.gov/OSCAL-Reference/models/datatypes/</guid><description>The OSCAL models share a set of data type primitives. These data types are documented in the following sections.
Simple Data types boolean A boolean value mapped in XML, JSON, and YAML as follows:
Value XML JSON YAML true true or 1 true true false false or 0 false false In XML Schema this is represented as a restriction on the built-in type boolean as follows:
&amp;lt;xs:simpleType name=&amp;#34;BooleanDatatype&amp;#34;&amp;gt; &amp;lt;xs:restriction base=&amp;#34;xs:boolean&amp;#34;&amp;gt; &amp;lt;xs:pattern value=&amp;#34;\S(.</description></item><item><title>OSCAL Release Notes</title><link>pages.nist.gov/OSCAL-Reference/models/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>pages.nist.gov/OSCAL-Reference/models/release-notes/</guid><description>Detailed release notes are provided with each OSCAL release.
The following are extra release notes for some older OSCAL releases.
OSCAL 1.0.0 Release The following changes were made in OSCAL 1.0.0 since OSCAL 1.0.0 Release Candidate (RC) 2.
Overall changes The following general changes were made in this release.
In prior releases for some JSON objects, an object&amp;rsquo;s identifier was used as a property.
For example:
{ &amp;#34;identifier1&amp;#34;: { &amp;#34;comment&amp;#34;: &amp;#34;remainder of object 1&amp;#34; }, &amp;#34;identifier2&amp;#34;: { &amp;#34;comment&amp;#34;: &amp;#34;remainder of object 2&amp;#34; } } While this &amp;ldquo;BY_KEY&amp;rdquo; notation does enforce uniqueness of identifiers, this syntax is difficult to write parsers for.</description></item></channel></rss>